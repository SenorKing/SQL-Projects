/*

Cleaning Data in SQL Queries

*/
--Select the table to view all the columns 

Select *
FROM [PORTFOLIO].[dbo].[NashvilleHousing]
--------------------------------------------------------------------------------------------------------------------------

-- Standardize Date Format
--- All the Date will be changed to the Date format to make it standart in this Project


Select SaleDate
FROM [PORTFOLIO].[dbo].[NashvilleHousing]

Update NashvilleHousing
SET SaleDate = CONVERT(Date,SaleDate)


------------------------------------------------------------------------------------------------------------------------

-- Populate Property Address data
-- The Addresses for some of the same customers are missing, below we will populate these code by finding null values with same ParcelID and different UniqueID
-- Then we will be able to populate the null values by setting the address with the same parcelid
Select *
FROM [PORTFOLIO].[dbo].[NashvilleHousing]
--Where PropertyAddress is null
order by ParcelID



SELECT a.ParcelID, a.PropertyAddress, b.ParcelID, b.PropertyAddress, ISNULL(a.PropertyAddress,b.PropertyAddress)
FROM [PORTFOLIO].[dbo].[NashvilleHousing] a
JOIN [PORTFOLIO].[dbo].[NashvilleHousing] b
	on a.ParcelID = b.ParcelID
	AND a.[UniqueID] <> b.[UniqueID]
Where a.PropertyAddress is null
-- After updating run the code above agian to check for null value. The results was an empty table

UPDATE a
SET PropertyAddress = ISNULL(a.PropertyAddress, b.PropertyAddress)
FROM [PORTFOLIO].[dbo].[NashvilleHousing] a
JOIN [PORTFOLIO].[dbo].[NashvilleHousing] b
	on a.ParcelID = b.ParcelID
	AND a.[UniqueID] <> b.[UniqueID]
Where a.PropertyAddress is null


--------------------------------------------------------------------------------------------------------------------------

-- Breaking out Address into Individual Columns (Address, City, State)


Select PropertyAddress
FROM [PORTFOLIO].[dbo].[NashvilleHousing]
--Where PropertyAddress is null
--order by ParcelID

SELECT
SUBSTRING(PropertyAddress, 1, CHARINDEX(',', PropertyAddress) -1 ) AS Address,
	SUBSTRING(PropertyAddress, CHARINDEX(',', PropertyAddress) +1, LEN(PropertyAddress)) AS Address
FROM [PORTFOLIO].[dbo].[NashvilleHousing]

ALTER TABLE NashvilleHousing
ADD PropertySplitAddress NVARCHAR(255);

UPDATE NashvilleHousing
SET PropertySplitAddress = SUBSTRING(PropertyAddress, 1, CHARINDEX(',', PropertyAddress) -1 )

ALTER TABLE NashvilleHousing
ADD PropertySplitCity NVARCHAR(255);

UPDATE NashvilleHousing
SET PropertySplitCity = SUBSTRING(PropertyAddress, CHARINDEX(',', PropertyAddress) +1, LEN(PropertyAddress))

--View new Columns added to the table
Select *
FROM [PORTFOLIO].[dbo].[NashvilleHousing]

SELECT OwnerAddress 
FROM [PORTFOLIO].[dbo].[NashvilleHousing]

SELECT
PARSENAME(REPLACE(OwnerAddress, ',','.'), 3) AS OwnerSplitAddress,
PARSENAME(REPLACE(OwnerAddress, ',','.'), 2) AS OwnerSplitCity,
PARSENAME(REPLACE(OwnerAddress, ',','.'), 1) AS OwnerSplitState
FROM [PORTFOLIO].[dbo].[NashvilleHousing]



ALTER TABLE NashvilleHousing
Add OwnerSplitAddress Nvarchar(255);

Update NashvilleHousing
SET OwnerSplitAddress = PARSENAME(REPLACE(OwnerAddress, ',', '.') , 3)


ALTER TABLE NashvilleHousing
Add OwnerSplitCity Nvarchar(255);

Update NashvilleHousing
SET OwnerSplitCity = PARSENAME(REPLACE(OwnerAddress, ',', '.') , 2)



ALTER TABLE NashvilleHousing
Add OwnerSplitState Nvarchar(255);

Update NashvilleHousing
SET OwnerSplitState = PARSENAME(REPLACE(OwnerAddress, ',', '.') , 1)

Select *
FROM [PORTFOLIO].[dbo].[NashvilleHousing]


--------------------------------------------------------------------------------------------------------------------------


-- Change Y and N to Yes and No in "Sold as Vacant" field


Select Distinct CAST (SoldAsVacant AS NVARCHAR(MAX)), Count(SoldAsVacant)
FROM [PORTFOLIO].[dbo].[NashvilleHousing]
Group by SoldAsVacant
order by 2

Select SoldAsVacant
, CASE When SoldAsVacant = 'Y' THEN 'Yes'
	   When SoldAsVacant = 'N' THEN 'No'
	   ELSE SoldAsVacant
	   END
FROM [PORTFOLIO].[dbo].[NashvilleHousing]


Update NashvilleHousing
SET SoldAsVacant = CASE When SoldAsVacant = 'Y' THEN 'Yes'
	   When SoldAsVacant = 'N' THEN 'No'
	   ELSE SoldAsVacant
	   END


-----------------------------------------------------------------------------------------------------------------------------------------------------------

-- Remove Duplicates

WITH RowNumCTE AS(
Select *,
	ROW_NUMBER() OVER (
	PARTITION BY ParcelID,
				 PropertyAddress,
				 SalePrice,
				 SaleDate,
				 LegalReference
				 ORDER BY
					UniqueID
					) row_num

FROM [PORTFOLIO].[dbo].[NashvilleHousing]
--order by ParcelID
)
Select *
From RowNumCTE
Where row_num > 1
Order by PropertyAddress


Select *
FROM [PORTFOLIO].[dbo].[NashvilleHousing]
---------------------------------------------------------------------------------------------------------

-- Delete Unused Columns


Select *
FROM [PORTFOLIO].[dbo].[NashvilleHousing]


ALTER TABLE [PORTFOLIO].[dbo].[NashvilleHousing]
DROP COLUMN OwnerAddress, TaxDistrict, PropertyAddress, SaleDate
